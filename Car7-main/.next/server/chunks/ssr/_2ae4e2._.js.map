{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://E%3A/ai-car-marketplace/app/%28admin%29/admin/_components/sidebar.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Sidebar = registerClientReference(\n    function() { throw new Error(\"Attempted to call Sidebar() from the server but Sidebar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(admin)/admin/_components/sidebar.jsx <module evaluation>\",\n    \"Sidebar\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,2EACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file://E%3A/ai-car-marketplace/app/%28admin%29/admin/_components/sidebar.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Sidebar = registerClientReference(\n    function() { throw new Error(\"Attempted to call Sidebar() from the server but Sidebar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(admin)/admin/_components/sidebar.jsx\",\n    \"Sidebar\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,uDACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file://E%3A/ai-car-marketplace/lib/helpers.js"],"sourcesContent":["export const formatCurrency = (amount) => {\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n  }).format(amount);\r\n};\r\n\r\n// Helper function to serialize car data\r\nexport const serializeCarData = (car, wishlisted = false) => {\r\n  return {\r\n    ...car,\r\n    price: car.price ? parseFloat(car.price.toString()) : 0,\r\n    createdAt: car.createdAt?.toISOString(),\r\n    updatedAt: car.updatedAt?.toISOString(),\r\n    wishlisted: wishlisted,\r\n  };\r\n};\r\n"],"names":[],"mappings":";;;;AAAO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS;QACpC,OAAO;QACP,UAAU;IACZ,GAAG,MAAM,CAAC;AACZ;AAGO,MAAM,mBAAmB,CAAC,KAAK,aAAa,KAAK;IACtD,OAAO;QACL,GAAG,GAAG;QACN,OAAO,IAAI,KAAK,GAAG,WAAW,IAAI,KAAK,CAAC,QAAQ,MAAM;QACtD,WAAW,IAAI,SAAS,EAAE;QAC1B,WAAW,IAAI,SAAS,EAAE;QAC1B,YAAY;IACd;AACF"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file://E%3A/ai-car-marketplace/actions/admin.js"],"sourcesContent":["\"use server\";\r\n\r\nimport { serializeCarData } from \"@/lib/helpers\";\r\nimport { db } from \"@/lib/prisma\";\r\nimport { auth } from \"@clerk/nextjs/server\";\r\nimport { revalidatePath } from \"next/cache\";\r\n\r\nexport async function getAdmin() {\r\n  const { userId } = await auth();\r\n  if (!userId) throw new Error(\"Unauthorized\");\r\n\r\n  const user = await db.user.findUnique({\r\n    where: { clerkUserId: userId },\r\n  });\r\n\r\n  // If user not found in our db or not an admin, return not authorized\r\n  if (!user || user.role !== \"ADMIN\") {\r\n    return { authorized: false, reason: \"not-admin\" };\r\n  }\r\n\r\n  return { authorized: true, user };\r\n}\r\n\r\n/**\r\n * Get all test drives for admin with filters\r\n */\r\nexport async function getAdminTestDrives({ search = \"\", status = \"\" }) {\r\n  try {\r\n    const { userId } = await auth();\r\n    if (!userId) throw new Error(\"Unauthorized\");\r\n\r\n    // Verify admin status\r\n    const user = await db.user.findUnique({\r\n      where: { clerkUserId: userId },\r\n    });\r\n\r\n    if (!user || user.role !== \"ADMIN\") {\r\n      throw new Error(\"Unauthorized access\");\r\n    }\r\n\r\n    // Build where conditions\r\n    let where = {};\r\n\r\n    // Add status filter\r\n    if (status) {\r\n      where.status = status;\r\n    }\r\n\r\n    // Add search filter\r\n    if (search) {\r\n      where.OR = [\r\n        {\r\n          car: {\r\n            OR: [\r\n              { make: { contains: search, mode: \"insensitive\" } },\r\n              { model: { contains: search, mode: \"insensitive\" } },\r\n            ],\r\n          },\r\n        },\r\n        {\r\n          user: {\r\n            OR: [\r\n              { name: { contains: search, mode: \"insensitive\" } },\r\n              { email: { contains: search, mode: \"insensitive\" } },\r\n            ],\r\n          },\r\n        },\r\n      ];\r\n    }\r\n\r\n    // Get bookings\r\n    const bookings = await db.testDriveBooking.findMany({\r\n      where,\r\n      include: {\r\n        car: true,\r\n        user: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            email: true,\r\n            imageUrl: true,\r\n            phone: true,\r\n          },\r\n        },\r\n      },\r\n      orderBy: [{ bookingDate: \"desc\" }, { startTime: \"asc\" }],\r\n    });\r\n\r\n    // Format the bookings\r\n    const formattedBookings = bookings.map((booking) => ({\r\n      id: booking.id,\r\n      carId: booking.carId,\r\n      car: serializeCarData(booking.car),\r\n      userId: booking.userId,\r\n      user: booking.user,\r\n      bookingDate: booking.bookingDate.toISOString(),\r\n      startTime: booking.startTime,\r\n      endTime: booking.endTime,\r\n      status: booking.status,\r\n      notes: booking.notes,\r\n      createdAt: booking.createdAt.toISOString(),\r\n      updatedAt: booking.updatedAt.toISOString(),\r\n    }));\r\n\r\n    return {\r\n      success: true,\r\n      data: formattedBookings,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error fetching test drives:\", error);\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Update test drive status\r\n */\r\nexport async function updateTestDriveStatus(bookingId, newStatus) {\r\n  try {\r\n    const { userId } = await auth();\r\n    if (!userId) throw new Error(\"Unauthorized\");\r\n\r\n    // Verify admin status\r\n    const user = await db.user.findUnique({\r\n      where: { clerkUserId: userId },\r\n    });\r\n\r\n    if (!user || user.role !== \"ADMIN\") {\r\n      throw new Error(\"Unauthorized access\");\r\n    }\r\n\r\n    // Get the booking\r\n    const booking = await db.testDriveBooking.findUnique({\r\n      where: { id: bookingId },\r\n    });\r\n\r\n    if (!booking) {\r\n      throw new Error(\"Booking not found\");\r\n    }\r\n\r\n    // Validate status\r\n    const validStatuses = [\r\n      \"PENDING\",\r\n      \"CONFIRMED\",\r\n      \"COMPLETED\",\r\n      \"CANCELLED\",\r\n      \"NO_SHOW\",\r\n    ];\r\n    if (!validStatuses.includes(newStatus)) {\r\n      return {\r\n        success: false,\r\n        error: \"Invalid status\",\r\n      };\r\n    }\r\n\r\n    // Update status\r\n    await db.testDriveBooking.update({\r\n      where: { id: bookingId },\r\n      data: { status: newStatus },\r\n    });\r\n\r\n    // Revalidate paths\r\n    revalidatePath(\"/admin/test-drives\");\r\n    revalidatePath(\"/reservations\");\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Test drive status updated successfully\",\r\n    };\r\n  } catch (error) {\r\n    throw new Error(\"Error updating test drive status:\" + error.message);\r\n  }\r\n}\r\n\r\nexport async function getDashboardData() {\r\n  try {\r\n    const { userId } = await auth();\r\n    if (!userId) throw new Error(\"Unauthorized\");\r\n\r\n    // Get user\r\n    const user = await db.user.findUnique({\r\n      where: { clerkUserId: userId },\r\n    });\r\n\r\n    if (!user || user.role !== \"ADMIN\") {\r\n      return {\r\n        success: false,\r\n        error: \"Unauthorized\",\r\n      };\r\n    }\r\n\r\n    // Fetch all necessary data in a single parallel operation\r\n    const [cars, testDrives] = await Promise.all([\r\n      // Get all cars with minimal fields\r\n      db.car.findMany({\r\n        select: {\r\n          id: true,\r\n          status: true,\r\n          featured: true,\r\n        },\r\n      }),\r\n\r\n      // Get all test drives with minimal fields\r\n      db.testDriveBooking.findMany({\r\n        select: {\r\n          id: true,\r\n          status: true,\r\n          carId: true,\r\n        },\r\n      }),\r\n    ]);\r\n\r\n    // Calculate car statistics\r\n    const totalCars = cars.length;\r\n    const availableCars = cars.filter(\r\n      (car) => car.status === \"AVAILABLE\"\r\n    ).length;\r\n    const soldCars = cars.filter((car) => car.status === \"SOLD\").length;\r\n    const unavailableCars = cars.filter(\r\n      (car) => car.status === \"UNAVAILABLE\"\r\n    ).length;\r\n    const featuredCars = cars.filter((car) => car.featured === true).length;\r\n\r\n    // Calculate test drive statistics\r\n    const totalTestDrives = testDrives.length;\r\n    const pendingTestDrives = testDrives.filter(\r\n      (td) => td.status === \"PENDING\"\r\n    ).length;\r\n    const confirmedTestDrives = testDrives.filter(\r\n      (td) => td.status === \"CONFIRMED\"\r\n    ).length;\r\n    const completedTestDrives = testDrives.filter(\r\n      (td) => td.status === \"COMPLETED\"\r\n    ).length;\r\n    const cancelledTestDrives = testDrives.filter(\r\n      (td) => td.status === \"CANCELLED\"\r\n    ).length;\r\n    const noShowTestDrives = testDrives.filter(\r\n      (td) => td.status === \"NO_SHOW\"\r\n    ).length;\r\n\r\n    // Calculate test drive conversion rate\r\n    const completedTestDriveCarIds = testDrives\r\n      .filter((td) => td.status === \"COMPLETED\")\r\n      .map((td) => td.carId);\r\n\r\n    const soldCarsAfterTestDrive = cars.filter(\r\n      (car) =>\r\n        car.status === \"SOLD\" && completedTestDriveCarIds.includes(car.id)\r\n    ).length;\r\n\r\n    const conversionRate =\r\n      completedTestDrives > 0\r\n        ? (soldCarsAfterTestDrive / completedTestDrives) * 100\r\n        : 0;\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        cars: {\r\n          total: totalCars,\r\n          available: availableCars,\r\n          sold: soldCars,\r\n          unavailable: unavailableCars,\r\n          featured: featuredCars,\r\n        },\r\n        testDrives: {\r\n          total: totalTestDrives,\r\n          pending: pendingTestDrives,\r\n          confirmed: confirmedTestDrives,\r\n          completed: completedTestDrives,\r\n          cancelled: cancelledTestDrives,\r\n          noShow: noShowTestDrives,\r\n          conversionRate: parseFloat(conversionRate.toFixed(2)),\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error fetching dashboard data:\", error.message);\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 368, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 374, "column": 0}, "map": {"version":3,"sources":["file://E%3A/ai-car-marketplace/app/%28admin%29/layout.js"],"sourcesContent":["import { notFound } from \"next/navigation\";\r\nimport { Sidebar } from \"./admin/_components/sidebar\";\r\nimport { getAdmin } from \"@/actions/admin\";\r\nimport Header from \"@/components/header\";\r\n\r\nexport default async function AdminLayout({ children }) {\r\n  const admin = await getAdmin();\r\n\r\n  // If user not found in our db or not an admin, redirect to 404\r\n  if (!admin.authorized) {\r\n    return notFound();\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-full\">\r\n      <Header isAdminPage={true} />\r\n      <div className=\"flex h-full w-56 flex-col top-20 fixed inset-y-0 z-50\">\r\n        <Sidebar />\r\n      </div>\r\n      <main className=\"md:pl-56 pt-[80px] h-full\">{children}</main>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AAHA;;;;;;AAKe,eAAe,YAAY,EAAE,QAAQ,EAAE;IACpD,MAAM,QAAQ,MAAM,CAAA,GAAA,gHAAA,CAAA,WAAQ,AAAD;IAE3B,+DAA+D;IAC/D,IAAI,CAAC,MAAM,UAAU,EAAE;QACrB,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IAChB;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,qHAAA,CAAA,UAAM;gBAAC,aAAa;;;;;;0BACrB,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,oJAAA,CAAA,UAAO;;;;;;;;;;0BAEV,8OAAC;gBAAK,WAAU;0BAA6B;;;;;;;;;;;;AAGnD"}},
    {"offset": {"line": 431, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}