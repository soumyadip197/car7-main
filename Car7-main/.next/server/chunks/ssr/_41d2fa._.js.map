{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://E%3A/ai-car-marketplace/app/%28admin%29/admin/test-drives/_components/test-drive-list.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const TestDrivesList = registerClientReference(\n    function() { throw new Error(\"Attempted to call TestDrivesList() from the server but TestDrivesList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(admin)/admin/test-drives/_components/test-drive-list.jsx <module evaluation>\",\n    \"TestDrivesList\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,iBAAiB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,+FACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file://E%3A/ai-car-marketplace/app/%28admin%29/admin/test-drives/_components/test-drive-list.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const TestDrivesList = registerClientReference(\n    function() { throw new Error(\"Attempted to call TestDrivesList() from the server but TestDrivesList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(admin)/admin/test-drives/_components/test-drive-list.jsx\",\n    \"TestDrivesList\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,iBAAiB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,2EACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file://E%3A/ai-car-marketplace/app/%28admin%29/admin/test-drives/page.jsx"],"sourcesContent":["import { TestDrivesList } from \"./_components/test-drive-list\";\r\n\r\nexport const metadata = {\r\n  title: \"Test Drives | Vehiql Admin\",\r\n  description: \"Manage test drive bookings\",\r\n};\r\n\r\nexport default function TestDrivesPage() {\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h1 className=\"text-2xl font-bold mb-6\">Test Drive Management</h1>\r\n      <TestDrivesList />\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;;;AAEO,MAAM,WAAW;IACtB,OAAO;IACP,aAAa;AACf;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAA0B;;;;;;0BACxC,8OAAC,oLAAA,CAAA,iBAAc;;;;;;;;;;;AAGrB"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file://E%3A/ai-car-marketplace/actions/test-drive.js"],"sourcesContent":["\"use server\";\r\n\r\nimport { revalidatePath } from \"next/cache\";\r\nimport { auth } from \"@clerk/nextjs/server\";\r\nimport { db } from \"@/lib/prisma\";\r\nimport { serializeCarData } from \"@/lib/helpers\";\r\n\r\n/**\r\n * Books a test drive for a car\r\n */\r\nexport async function bookTestDrive({\r\n  carId,\r\n  bookingDate,\r\n  startTime,\r\n  endTime,\r\n  notes,\r\n}) {\r\n  try {\r\n    // Authenticate user\r\n    const { userId } = await auth();\r\n    if (!userId) throw new Error(\"You must be logged in to book a test drive\");\r\n\r\n    // Find user in our database\r\n    const user = await db.user.findUnique({\r\n      where: { clerkUserId: userId },\r\n    });\r\n\r\n    if (!user) throw new Error(\"User not found in database\");\r\n\r\n    // Check if car exists and is available\r\n    const car = await db.car.findUnique({\r\n      where: { id: carId, status: \"AVAILABLE\" },\r\n    });\r\n\r\n    if (!car) throw new Error(\"Car not available for test drive\");\r\n\r\n    // Check if slot is already booked\r\n    const existingBooking = await db.testDriveBooking.findFirst({\r\n      where: {\r\n        carId,\r\n        bookingDate: new Date(bookingDate),\r\n        startTime,\r\n        status: { in: [\"PENDING\", \"CONFIRMED\"] },\r\n      },\r\n    });\r\n\r\n    if (existingBooking) {\r\n      throw new Error(\r\n        \"This time slot is already booked. Please select another time.\"\r\n      );\r\n    }\r\n\r\n    // Create the booking\r\n    const booking = await db.testDriveBooking.create({\r\n      data: {\r\n        carId,\r\n        userId: user.id,\r\n        bookingDate: new Date(bookingDate),\r\n        startTime,\r\n        endTime,\r\n        notes: notes || null,\r\n        status: \"PENDING\",\r\n      },\r\n    });\r\n\r\n    // Revalidate relevant paths\r\n    revalidatePath(`/test-drive/${carId}`);\r\n    revalidatePath(`/cars/${carId}`);\r\n\r\n    return {\r\n      success: true,\r\n      data: booking,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error booking test drive:\", error);\r\n    return {\r\n      success: false,\r\n      error: error.message || \"Failed to book test drive\",\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Get user's test drive bookings - reservations page\r\n */\r\nexport async function getUserTestDrives() {\r\n  try {\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      return {\r\n        success: false,\r\n        error: \"Unauthorized\",\r\n      };\r\n    }\r\n\r\n    // Get the user from our database\r\n    const user = await db.user.findUnique({\r\n      where: { clerkUserId: userId },\r\n    });\r\n\r\n    if (!user) {\r\n      return {\r\n        success: false,\r\n        error: \"User not found\",\r\n      };\r\n    }\r\n\r\n    // Get user's test drive bookings\r\n    const bookings = await db.testDriveBooking.findMany({\r\n      where: { userId: user.id },\r\n      include: {\r\n        car: true,\r\n      },\r\n      orderBy: { bookingDate: \"desc\" },\r\n    });\r\n\r\n    // Format the bookings\r\n    const formattedBookings = bookings.map((booking) => ({\r\n      id: booking.id,\r\n      carId: booking.carId,\r\n      car: serializeCarData(booking.car),\r\n      bookingDate: booking.bookingDate.toISOString(),\r\n      startTime: booking.startTime,\r\n      endTime: booking.endTime,\r\n      status: booking.status,\r\n      notes: booking.notes,\r\n      createdAt: booking.createdAt.toISOString(),\r\n      updatedAt: booking.updatedAt.toISOString(),\r\n    }));\r\n\r\n    return {\r\n      success: true,\r\n      data: formattedBookings,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error fetching test drives:\", error);\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Cancel a test drive booking\r\n */\r\nexport async function cancelTestDrive(bookingId) {\r\n  try {\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      return {\r\n        success: false,\r\n        error: \"Unauthorized\",\r\n      };\r\n    }\r\n\r\n    // Get the user from our database\r\n    const user = await db.user.findUnique({\r\n      where: { clerkUserId: userId },\r\n    });\r\n\r\n    if (!user) {\r\n      return {\r\n        success: false,\r\n        error: \"User not found\",\r\n      };\r\n    }\r\n\r\n    // Get the booking\r\n    const booking = await db.testDriveBooking.findUnique({\r\n      where: { id: bookingId },\r\n    });\r\n\r\n    if (!booking) {\r\n      return {\r\n        success: false,\r\n        error: \"Booking not found\",\r\n      };\r\n    }\r\n\r\n    // Check if user owns this booking\r\n    if (booking.userId !== user.id || user.role !== \"ADMIN\") {\r\n      return {\r\n        success: false,\r\n        error: \"Unauthorized to cancel this booking\",\r\n      };\r\n    }\r\n\r\n    // Check if booking can be cancelled\r\n    if (booking.status === \"CANCELLED\") {\r\n      return {\r\n        success: false,\r\n        error: \"Booking is already cancelled\",\r\n      };\r\n    }\r\n\r\n    if (booking.status === \"COMPLETED\") {\r\n      return {\r\n        success: false,\r\n        error: \"Cannot cancel a completed booking\",\r\n      };\r\n    }\r\n\r\n    // Update the booking status\r\n    await db.testDriveBooking.update({\r\n      where: { id: bookingId },\r\n      data: { status: \"CANCELLED\" },\r\n    });\r\n\r\n    // Revalidate paths\r\n    revalidatePath(\"/reservations\");\r\n    revalidatePath(\"/admin/test-drives\");\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Test drive cancelled successfully\",\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error cancelling test drive:\", error);\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 319, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}