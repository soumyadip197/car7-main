{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://E%3A/ai-car-marketplace/lib/helpers.js"],"sourcesContent":["export const formatCurrency = (amount) => {\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n  }).format(amount);\r\n};\r\n\r\n// Helper function to serialize car data\r\nexport const serializeCarData = (car, wishlisted = false) => {\r\n  return {\r\n    ...car,\r\n    price: car.price ? parseFloat(car.price.toString()) : 0,\r\n    createdAt: car.createdAt?.toISOString(),\r\n    updatedAt: car.updatedAt?.toISOString(),\r\n    wishlisted: wishlisted,\r\n  };\r\n};\r\n"],"names":[],"mappings":";;;;AAAO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS;QACpC,OAAO;QACP,UAAU;IACZ,GAAG,MAAM,CAAC;AACZ;AAGO,MAAM,mBAAmB,CAAC,KAAK,aAAa,KAAK;IACtD,OAAO;QACL,GAAG,GAAG;QACN,OAAO,IAAI,KAAK,GAAG,WAAW,IAAI,KAAK,CAAC,QAAQ,MAAM;QACtD,WAAW,IAAI,SAAS,EAAE;QAC1B,WAAW,IAAI,SAAS,EAAE;QAC1B,YAAY;IACd;AACF"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":["file://E%3A/ai-car-marketplace/actions/car-listing.js"],"sourcesContent":["\"use server\";\r\n\r\nimport { serializeCarData } from \"@/lib/helpers\";\r\nimport { db } from \"@/lib/prisma\";\r\nimport { auth } from \"@clerk/nextjs/server\";\r\nimport { revalidatePath } from \"next/cache\";\r\n\r\n/**\r\n * Get simplified filters for the car marketplace\r\n */\r\nexport async function getCarFilters() {\r\n  try {\r\n    // Get unique makes\r\n    const makes = await db.car.findMany({\r\n      where: { status: \"AVAILABLE\" },\r\n      select: { make: true },\r\n      distinct: [\"make\"],\r\n      orderBy: { make: \"asc\" },\r\n    });\r\n\r\n    // Get unique body types\r\n    const bodyTypes = await db.car.findMany({\r\n      where: { status: \"AVAILABLE\" },\r\n      select: { bodyType: true },\r\n      distinct: [\"bodyType\"],\r\n      orderBy: { bodyType: \"asc\" },\r\n    });\r\n\r\n    // Get unique fuel types\r\n    const fuelTypes = await db.car.findMany({\r\n      where: { status: \"AVAILABLE\" },\r\n      select: { fuelType: true },\r\n      distinct: [\"fuelType\"],\r\n      orderBy: { fuelType: \"asc\" },\r\n    });\r\n\r\n    // Get unique transmissions\r\n    const transmissions = await db.car.findMany({\r\n      where: { status: \"AVAILABLE\" },\r\n      select: { transmission: true },\r\n      distinct: [\"transmission\"],\r\n      orderBy: { transmission: \"asc\" },\r\n    });\r\n\r\n    // Get min and max prices using Prisma aggregations\r\n    const priceAggregations = await db.car.aggregate({\r\n      where: { status: \"AVAILABLE\" },\r\n      _min: { price: true },\r\n      _max: { price: true },\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        makes: makes.map((item) => item.make),\r\n        bodyTypes: bodyTypes.map((item) => item.bodyType),\r\n        fuelTypes: fuelTypes.map((item) => item.fuelType),\r\n        transmissions: transmissions.map((item) => item.transmission),\r\n        priceRange: {\r\n          min: priceAggregations._min.price\r\n            ? parseFloat(priceAggregations._min.price.toString())\r\n            : 0,\r\n          max: priceAggregations._max.price\r\n            ? parseFloat(priceAggregations._max.price.toString())\r\n            : 100000,\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    throw new Error(\"Error fetching car filters:\" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Get cars with simplified filters\r\n */\r\nexport async function getCars({\r\n  search = \"\",\r\n  make = \"\",\r\n  bodyType = \"\",\r\n  fuelType = \"\",\r\n  transmission = \"\",\r\n  minPrice = 0,\r\n  maxPrice = Number.MAX_SAFE_INTEGER,\r\n  sortBy = \"newest\", // Options: newest, priceAsc, priceDesc\r\n  page = 1,\r\n  limit = 6,\r\n}) {\r\n  try {\r\n    // Get current user if authenticated\r\n    const { userId } = await auth();\r\n    let dbUser = null;\r\n\r\n    if (userId) {\r\n      dbUser = await db.user.findUnique({\r\n        where: { clerkUserId: userId },\r\n      });\r\n    }\r\n\r\n    // Build where conditions\r\n    let where = {\r\n      status: \"AVAILABLE\",\r\n    };\r\n\r\n    if (search) {\r\n      where.OR = [\r\n        { make: { contains: search, mode: \"insensitive\" } },\r\n        { model: { contains: search, mode: \"insensitive\" } },\r\n        { description: { contains: search, mode: \"insensitive\" } },\r\n      ];\r\n    }\r\n\r\n    if (make) where.make = { equals: make, mode: \"insensitive\" };\r\n    if (bodyType) where.bodyType = { equals: bodyType, mode: \"insensitive\" };\r\n    if (fuelType) where.fuelType = { equals: fuelType, mode: \"insensitive\" };\r\n    if (transmission)\r\n      where.transmission = { equals: transmission, mode: \"insensitive\" };\r\n\r\n    // Add price range\r\n    where.price = {\r\n      gte: parseFloat(minPrice) || 0,\r\n    };\r\n\r\n    if (maxPrice && maxPrice < Number.MAX_SAFE_INTEGER) {\r\n      where.price.lte = parseFloat(maxPrice);\r\n    }\r\n\r\n    // Calculate pagination\r\n    const skip = (page - 1) * limit;\r\n\r\n    // Determine sort order\r\n    let orderBy = {};\r\n    switch (sortBy) {\r\n      case \"priceAsc\":\r\n        orderBy = { price: \"asc\" };\r\n        break;\r\n      case \"priceDesc\":\r\n        orderBy = { price: \"desc\" };\r\n        break;\r\n      case \"newest\":\r\n      default:\r\n        orderBy = { createdAt: \"desc\" };\r\n        break;\r\n    }\r\n\r\n    // Get total count for pagination\r\n    const totalCars = await db.car.count({ where });\r\n\r\n    // Execute the main query\r\n    const cars = await db.car.findMany({\r\n      where,\r\n      take: limit,\r\n      skip,\r\n      orderBy,\r\n    });\r\n\r\n    // If we have a user, check which cars are wishlisted\r\n    let wishlisted = new Set();\r\n    if (dbUser) {\r\n      const savedCars = await db.userSavedCar.findMany({\r\n        where: { userId: dbUser.id },\r\n        select: { carId: true },\r\n      });\r\n\r\n      wishlisted = new Set(savedCars.map((saved) => saved.carId));\r\n    }\r\n\r\n    // Serialize and check wishlist status\r\n    const serializedCars = cars.map((car) =>\r\n      serializeCarData(car, wishlisted.has(car.id))\r\n    );\r\n\r\n    return {\r\n      success: true,\r\n      data: serializedCars,\r\n      pagination: {\r\n        total: totalCars,\r\n        page,\r\n        limit,\r\n        pages: Math.ceil(totalCars / limit),\r\n      },\r\n    };\r\n  } catch (error) {\r\n    throw new Error(\"Error fetching cars:\" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Toggle car in user's wishlist\r\n */\r\nexport async function toggleSavedCar(carId) {\r\n  try {\r\n    const { userId } = await auth();\r\n    if (!userId) throw new Error(\"Unauthorized\");\r\n\r\n    const user = await db.user.findUnique({\r\n      where: { clerkUserId: userId },\r\n    });\r\n\r\n    if (!user) throw new Error(\"User not found\");\r\n\r\n    // Check if car exists\r\n    const car = await db.car.findUnique({\r\n      where: { id: carId },\r\n    });\r\n\r\n    if (!car) {\r\n      return {\r\n        success: false,\r\n        error: \"Car not found\",\r\n      };\r\n    }\r\n\r\n    // Check if car is already saved\r\n    const existingSave = await db.userSavedCar.findUnique({\r\n      where: {\r\n        userId_carId: {\r\n          userId: user.id,\r\n          carId,\r\n        },\r\n      },\r\n    });\r\n\r\n    // If car is already saved, remove it\r\n    if (existingSave) {\r\n      await db.userSavedCar.delete({\r\n        where: {\r\n          userId_carId: {\r\n            userId: user.id,\r\n            carId,\r\n          },\r\n        },\r\n      });\r\n\r\n      revalidatePath(`/saved-cars`);\r\n      return {\r\n        success: true,\r\n        saved: false,\r\n        message: \"Car removed from favorites\",\r\n      };\r\n    }\r\n\r\n    // If car is not saved, add it\r\n    await db.userSavedCar.create({\r\n      data: {\r\n        userId: user.id,\r\n        carId,\r\n      },\r\n    });\r\n\r\n    revalidatePath(`/saved-cars`);\r\n    return {\r\n      success: true,\r\n      saved: true,\r\n      message: \"Car added to favorites\",\r\n    };\r\n  } catch (error) {\r\n    throw new Error(\"Error toggling saved car:\" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Get car details by ID\r\n */\r\nexport async function getCarById(carId) {\r\n  try {\r\n    // Get current user if authenticated\r\n    const { userId } = await auth();\r\n    let dbUser = null;\r\n\r\n    if (userId) {\r\n      dbUser = await db.user.findUnique({\r\n        where: { clerkUserId: userId },\r\n      });\r\n    }\r\n\r\n    // Get car details\r\n    const car = await db.car.findUnique({\r\n      where: { id: carId },\r\n    });\r\n\r\n    if (!car) {\r\n      return {\r\n        success: false,\r\n        error: \"Car not found\",\r\n      };\r\n    }\r\n\r\n    // Check if car is wishlisted by user\r\n    let isWishlisted = false;\r\n    if (dbUser) {\r\n      const savedCar = await db.userSavedCar.findUnique({\r\n        where: {\r\n          userId_carId: {\r\n            userId: dbUser.id,\r\n            carId,\r\n          },\r\n        },\r\n      });\r\n\r\n      isWishlisted = !!savedCar;\r\n    }\r\n\r\n    // Check if user has already booked a test drive for this car\r\n    const existingTestDrive = await db.testDriveBooking.findFirst({\r\n      where: {\r\n        carId,\r\n        userId: dbUser.id,\r\n        status: { in: [\"PENDING\", \"CONFIRMED\", \"COMPLETED\"] },\r\n      },\r\n      orderBy: {\r\n        createdAt: \"desc\",\r\n      },\r\n    });\r\n\r\n    let userTestDrive = null;\r\n\r\n    if (existingTestDrive) {\r\n      userTestDrive = {\r\n        id: existingTestDrive.id,\r\n        status: existingTestDrive.status,\r\n        bookingDate: existingTestDrive.bookingDate.toISOString(),\r\n      };\r\n    }\r\n\r\n    // Get dealership info for test drive availability\r\n    const dealership = await db.dealershipInfo.findFirst({\r\n      include: {\r\n        workingHours: true,\r\n      },\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        ...serializeCarData(car, isWishlisted),\r\n        testDriveInfo: {\r\n          userTestDrive,\r\n          dealership: dealership\r\n            ? {\r\n                ...dealership,\r\n                createdAt: dealership.createdAt.toISOString(),\r\n                updatedAt: dealership.updatedAt.toISOString(),\r\n                workingHours: dealership.workingHours.map((hour) => ({\r\n                  ...hour,\r\n                  createdAt: hour.createdAt.toISOString(),\r\n                  updatedAt: hour.updatedAt.toISOString(),\r\n                })),\r\n              }\r\n            : null,\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    throw new Error(\"Error fetching car details:\" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Get user's saved cars\r\n */\r\nexport async function getSavedCars() {\r\n  try {\r\n    const { userId } = await auth();\r\n    if (!userId) {\r\n      return {\r\n        success: false,\r\n        error: \"Unauthorized\",\r\n      };\r\n    }\r\n\r\n    // Get the user from our database\r\n    const user = await db.user.findUnique({\r\n      where: { clerkUserId: userId },\r\n    });\r\n\r\n    if (!user) {\r\n      return {\r\n        success: false,\r\n        error: \"User not found\",\r\n      };\r\n    }\r\n\r\n    // Get saved cars with their details\r\n    const savedCars = await db.userSavedCar.findMany({\r\n      where: { userId: user.id },\r\n      include: {\r\n        car: true,\r\n      },\r\n      orderBy: { savedAt: \"desc\" },\r\n    });\r\n\r\n    // Extract and format car data\r\n    const cars = savedCars.map((saved) => serializeCarData(saved.car));\r\n\r\n    return {\r\n      success: true,\r\n      data: cars,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error fetching saved cars:\", error);\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 482, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 488, "column": 0}, "map": {"version":3,"sources":["file://E%3A/ai-car-marketplace/app/%28main%29/saved-cars/_components/saved-cars-list.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const SavedCarsList = registerClientReference(\n    function() { throw new Error(\"Attempted to call SavedCarsList() from the server but SavedCarsList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/saved-cars/_components/saved-cars-list.jsx <module evaluation>\",\n    \"SavedCarsList\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,uFACA"}},
    {"offset": {"line": 496, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 502, "column": 0}, "map": {"version":3,"sources":["file://E%3A/ai-car-marketplace/app/%28main%29/saved-cars/_components/saved-cars-list.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const SavedCarsList = registerClientReference(\n    function() { throw new Error(\"Attempted to call SavedCarsList() from the server but SavedCarsList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(main)/saved-cars/_components/saved-cars-list.jsx\",\n    \"SavedCarsList\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,mEACA"}},
    {"offset": {"line": 510, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 516, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 520, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 526, "column": 0}, "map": {"version":3,"sources":["file://E%3A/ai-car-marketplace/app/%28main%29/saved-cars/page.jsx"],"sourcesContent":["import { getSavedCars } from \"@/actions/car-listing\";\r\nimport { SavedCarsList } from \"./_components/saved-cars-list\";\r\nimport { auth } from \"@clerk/nextjs/server\";\r\nimport { redirect } from \"next/navigation\";\r\n\r\nexport const metadata = {\r\n  title: \"Saved Cars | Vehiql\",\r\n  description: \"View your saved cars and favorites\",\r\n};\r\n\r\nexport default async function SavedCarsPage() {\r\n  // Check authentication on server\r\n  const { userId } = await auth();\r\n  if (!userId) {\r\n    redirect(\"/sign-in?redirect=/saved-cars\");\r\n  }\r\n\r\n  // Fetch saved cars on the server\r\n  const savedCarsResult = await getSavedCars();\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-12\">\r\n      <h1 className=\"text-6xl mb-6 gradient-title\">Your Saved Cars</h1>\r\n      <SavedCarsList initialData={savedCarsResult} />\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAEA;AADA;AACA;;;;;;AAEO,MAAM,WAAW;IACtB,OAAO;IACP,aAAa;AACf;AAEe,eAAe;IAC5B,iCAAiC;IACjC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,mLAAA,CAAA,OAAI,AAAD;IAC5B,IAAI,CAAC,QAAQ;QACX,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IACX;IAEA,iCAAiC;IACjC,MAAM,kBAAkB,MAAM,CAAA,GAAA,yHAAA,CAAA,eAAY,AAAD;IAEzC,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAA+B;;;;;;0BAC7C,8OAAC,yKAAA,CAAA,gBAAa;gBAAC,aAAa;;;;;;;;;;;;AAGlC"}},
    {"offset": {"line": 578, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}